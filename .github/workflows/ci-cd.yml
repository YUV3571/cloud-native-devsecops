name: DevSecOps Security Scans

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ------------------------------
  # STEP 1: Security Scans (Trivy + Checkov)
  # ------------------------------
  security-scans:
    name: Security Scans
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: latest

      - name: Run Trivy
        run: |
          trivy fs . \
            --format sarif \
            --output trivy-results.sarif \
            --severity HIGH,CRITICAL

      - name: Upload Trivy Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov
        run: |
          checkov -d terraform-iac \
            --framework terraform \
            --output-format sarif \
            --output-file-path checkov-results.sarif

      - name: Upload Checkov Results
        uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: checkov-results.sarif

  # ------------------------------
  # STEP 2: CodeQL Analysis (depends on security scans)
  # ------------------------------
  codeql-analysis:
    name: CodeQL Analysis
    needs: security-scans
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

  # ------------------------------
  # STEP 3: Terraform (depends on CodeQL)
  # ------------------------------
  terraform:
    name: Terraform Deployment
    needs: codeql-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve


  build-and-push-image:
    name: Build and Push Container Image
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment variables
        run: |
          echo "ACR_LOGIN_SERVER=${{ secrets.ACR_NAME }}.azurecr.io" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ secrets.ACR_NAME }}.azurecr.io/shared-app" >> $GITHUB_ENV

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          driver-opts: |
            image=moby/buildkit:master

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: ./shared-app
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.pushed_at }}
            org.opencontainers.image.title=shared-app
            org.opencontainers.image.description=Cloud Native DevSecOps Demo Application

  run-cost-analysis:
    name: Run Azure Cost Analysis
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Azure Cost Analyzer
        uses: ./cloud-cost-gpt
        with:
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}

      - name: Upload Cost Report
        uses: actions/upload-artifact@v4
        with:
          name: cost-report
          path: cost_report.md
